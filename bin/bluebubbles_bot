#!python3

import os
import sys
import yaml
import logging
import argparse
import persona
from typing import List
from dataclasses import dataclass
import datetime
import socketio

class LoggingFormatter(logging.Formatter):
	def format(self, record):
		module_max_width = 30
		datefmt='%Y/%m/%d/ %H:%M:%S'
		level = f'[{record.levelname}]'.ljust(9)
		if 'log_module' not in dir(record) :
			modname = str(record.module)+'.'+str(record.name)
		else :
			modname = record.log_module
		modname = (f'{modname}'[:module_max_width-1] + ']').ljust(module_max_width)
		final = "%-7s %s [%s %s" % (self.formatTime(record, self.datefmt), level, modname, record.getMessage())
		return final

if __name__ == '__main__':

	# Command-line client
	# Define constants
	config_template = {'bluebubbles_bot': {}}

	# Gather Argument options
	EXAMPLE_TEXT='Example:\n\tbluebubbles_bot -h'
	parser = argparse.ArgumentParser(epilog=EXAMPLE_TEXT,formatter_class=argparse.RawDescriptionHelpFormatter)
	parser.add_argument('-H', '--hosts', action='append', default=None, help='Collects arguments in an array.')
	parser.add_argument('-d', '--dry-run', action='store_true', help='Store the existence of a variable.')
	parser.add_argument('-l', '--log', action='store', help='Specify a file to log to.')
	parser.add_argument('-v', '--verbose', action='count', help='Include verbose information in the output. Add \'v\'s for more output.',default=0)
	args = parser.parse_args()

	log = logging.getLogger(__name__)
	log = logging.LoggerAdapter(log,{'log_module':'bluebubbles_bot'})

	# Configure logging
	log_options = [logging.ERROR, logging.WARNING, logging.INFO, logging.DEBUG]
	if not args.verbose :
		args.verbose = 0
	if args.verbose > 3 :
		args.verbose = 3
	if args.log :
		logging.basicConfig(level=log_options[args.verbose],filename=args.log)
		logging.getLogger().addHandler(logging.StreamHandler(sys.stderr))
	else :
		logging.basicConfig(level=log_options[args.verbose])
	logging.getLogger().handlers[0].setFormatter(LoggingFormatter())
	logging.propagate=True

	# Create persona instance
	test = persona.Persona()

	# Test Message
	message = persona.Message(text="Hello",sender_identifier="Daniel",chat_identifier=None,attachments=[],timestamp=datetime.datetime.now(), recipients=[], identifier=None)
	responses = test.receive_message(message)
	for response in responses :
		print('Bot responded with:')
		print(response.text)

	# Create socket connection
	sio = socketio.AsyncClient()
